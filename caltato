#!/usr/bin/python

import gflags
import httplib2
import os
import sys
import re
import datetime
import logging
import argparse
import json

from apiclient.discovery import build
from oauth2client.file import Storage
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.tools import run


################################################################################
################################################################################
# From: https://developers.google.com/google-apps/tasks/instantiate
def getServices(DIR, config):
# Authenticate the user (possibly requiring them to authorize this app using
# their browser) and return a service object that can access that user's Task
# data.

  FLAGS = gflags.FLAGS

  # Make sure we have a client_id and a client_secret
  if 'client_id' not in config: 
    print >> sys.stderr, "No client_id in configuration file."
    sys.exit(1)

  if 'client_secret' not in config: 
    print >> sys.stderr, "No client_secret in configuration file."
    sys.exit(1)

  # Set up a Flow object to be used if we need to authenticate. This
  # sample uses OAuth 2.0, and we set up the OAuth2WebServerFlow with
  # the information it needs to authenticate. Note that it is called
  # the Web Server Flow, but it can also handle the flow for native
  # applications
  # The client_id and client_secret are copied from the API Access tab on
  # the Google APIs Console
  FLOW = OAuth2WebServerFlow(
      client_id=config['client_id'],
      client_secret=config['client_secret'],
      scope='https://www.googleapis.com/auth/tasks https://www.googleapis.com/auth/calendar',
      user_agent='caltato/0.1')

  # To disable the local server feature, uncomment the following line:
  FLAGS.auth_local_webserver = False

  # If the Credentials don't exist or are invalid, run through the native client
  # flow. The Storage object will ensure that if successful the good
  # Credentials will get written back to a file.
  storage = Storage(DIR+'/credentials')
  credentials = storage.get()
  if credentials is None or credentials.invalid == True:
    credentials = run(FLOW, storage)

  # Create an httplib2.Http object to handle our HTTP requests and authorize it
  # with our good Credentials.
  http = httplib2.Http()
  http = credentials.authorize(http)

  # Build a service object for interacting with the API. Visit the Google APIs
  # Console to get a developerKey for your own application.
  calService = build(serviceName='calendar', version='v3', http=http)
  taskService = build(serviceName='tasks', version='v1', http=http)
  
  return (calService, taskService)

def dateToGoogleString(date):
# Formats the given date as a datetime that Google's API seems to like.
  return datetime.datetime.combine(
    date,
    datetime.time(0,0,0)
  ).isoformat('T') + 'Z'

def findDate(thing):
# Try to turn thing into a datetime.date.
# This can be useful, for example, with results from Google Calendar that can
# contain either a date or a datetime, depending on whether or not it's an
# all-day event.  Even worse, these different kinds of answers appear in
# differnent places in the 'start' hash.  
  match = re.search(
    r"(\d\d\d\d)-(\d\d)-(\d\d)",
    thing.__repr__()
  )
  return datetime.date(
    int(match.group(1)),
    int(match.group(2)),
    int(match.group(3))
  )


def fromCal(args, config, calService, taskService):
# Search the user's default calendar for events that have "task: ...." lines in
# their description.  If today is that date of that event (or if we're at an
# offset from that date specified in the task:... line), insert this task into
# the user's default task list.

  # Which date are we using?
  if args.fakedate is not None:
    today = findDate(args.fakedate)
    logging.info("Using fakedate: %s", today)
  else:
    today = datetime.date.today()

  # What range should we check in the calendar?
  maxOffset = int(config.get('maxOffset', 365))
  timeMin = today + datetime.timedelta(days=-maxOffset)
  timeMax = today + datetime.timedelta(days=+maxOffset)
  
  # Get the calendar events.
  numEvents = 0
  numTasks = 0
  token = None
  while True:
    events = calService.events().list(
      calendarId='primary',
      maxResults=10000,
      pageToken=token,
      timeMin=dateToGoogleString(timeMin),
      timeMax=dateToGoogleString(timeMax),
      singleEvents=True
    ).execute()

    # Look for task specifications in all of these events.
    for event in events['items']:
      numEvents += 1
      logging.debug("Got an event: %s", event)
      summary = event.get('summary', '').encode('ascii', 'ignore')
      description = event.get('description', '').encode('ascii', 'ignore')
      for line in description.split("\n"):
        for match in re.finditer(r"^task:(.*)", line):
          # Remember the command we just found.
          command = match.group(1) 
          logging.info("In this event: %s", event)
          logging.info("  Found a command: %s", command)

          # Look for special codes on this line:
          # 1. Extract an offset from the event's date, if any.
          offset = 0
          offsetPattern = r"^\s*([+-]?\d+)"
          match = re.match(offsetPattern, command)
          if match is not None:
            offset = int(match.group(1))
            command = re.sub(offsetPattern, "", command, 1)
            logging.info("  Explicit offset is %d", offset)

          # 2. ...that's all for now.

          # When does this event start?
          eventStart = findDate(event['start'])

          # Figure out when this task should be added to the task list.
          target = eventStart + datetime.timedelta(days=offset)
          logging.info("  Target date is %s.", target)

          # Is today the target date?
          if target == today:
            # Yes.  
            numTasks += 1

            # Look for directives that customize the task text.
            # 1. $fulldate --> Full date
            command = re.sub(r"\$fulldate", "{}".format(eventStart), command)

            # 2. $date --> Short date
            command = re.sub(r"\$date", eventStart.strftime("%m-%d"), command)

            # 3. $title --> Event summary
            command = re.sub(r"\$title", summary, command)

            # Clean up the message a little.
            message = command
            message = re.sub("^ *", "", message)
            message = re.sub(" +", " ", message)


            task = {
              'title': message,
              'notes': "Original event: " + event['htmlLink'],
            }
            
            # If this event is not in the past, add a due date.
            if offset >= 0:
              task['due'] = dateToGoogleString(eventStart)

            # Add this task to the user's task list.
            logging.info("  Inserting this task: %s", task)
            if not args.dryrun:
              result = taskService.tasks().insert(
                tasklist='@default',
                body=task
              ).execute()
              logging.info("  Task Id is %s", result['id'])
            else:
              # ...unless this is a dry run.
              print task['title']
              print '  ', task['notes']
              if 'due' in task:
                print '   Due:', task['due']
              print


          else:
            logging.info("  That's not today.  Moving on.")

    token = events.get('nextPageToken')
    if token is None:
     break

  logging.info("Found %d tasks in %d events.", numTasks, numEvents)

def zombieTasks(args, config, taskService):
# Search the user's default task list that
#   1. are marked as complete,
#   2. mention in their notes that they're zombies with a line like this: "zombie: <offset>"
#   3. have a completion date at least <offset> days in the past.
# For each task meeting these requirements, we update the status to "needsAction".


  token = None
  while True:
    tasks = taskService.tasks().list(
      tasklist='@default',
      maxResults=10000,
      showHidden=True,
      pageToken=token
    ).execute()

    for task in tasks['items']:
      # Get things into ASCII, so nobody gets hurt.
      status = task.get('status', '').encode('ascii', 'ignore')
      notes = task.get('notes', '').encode('ascii', 'ignore')

      # Ignore anything that's not completed.
      if status != 'completed':
        continue

      # Look for a zombie spec.  Skip this task if there is none.
      match = re.search("zombie: (\d+)", notes)
      if match is None:
        continue

      offset = match.group(1)

      print task
      print offset

    token  = tasks.get('nextPageToken')
    if token is None:
      break


def main():
  # Make some sense of the command line arguments.
  parser = argparse.ArgumentParser(description='Create Google Tasks from various sources.')
  parser.add_argument(
    '-d', '--dryrun',
    action='store_true',
    help='Do not create any tasks.  Print them instead.'
  )
  parser.add_argument(
    '-f', '--fakedate',
    help='Use this date instead of the current date.'
  )
  parser.add_argument(
    '-c', '--calendar',
    action='store_true',
    help='Look for tasks in the calendar.'
  )
  parser.add_argument(
    '-z', '--zombies',
    action='store_true',
    help='Look for zombie tasks.'
  )
  args = parser.parse_args()


  # Figure out which directory to use, and make sure it exists.
  DIR = os.environ['HOME']+'/.caltato'
  if not os.path.exists(DIR):
    os.makedirs(DIR)

  # Keep a log, so we know what's happening.
  logging.basicConfig(
    filename=DIR+'/log',
    level=logging.INFO
  )

  logging.info("************************************************************")
  logging.info("Starting at %s", datetime.datetime.now())

  # Read the configuration.
  configFileName = DIR + "/config"
  if os.path.exists(configFileName):
    with open(DIR+"/config") as configFile:
      config = json.load(configFile)

  # Authenticate.
  (calService, taskService) = getServices(DIR, config)

  # Create tasks from calendar entries.
  if args.calendar: fromCal(args, config, calService, taskService)
  if args.zombies: zombieTasks(args, config, taskService)


main()
